--- Defines a transition step of each component.

(tomod COMPONENT-DYNAMICS is
  protecting PERIODIC-COMPONENT .
  protecting PORT .
  protecting SYNCHAADL-PROPERTIES .
  including TIME-DOMAIN .

  var CR : ComponentRef . var P : FeatureId . 
  vars PORTS PORTS' REST : Configuration .  var PROPS : PropertyAssociation .
  var NZ : NzNat .  var NDL : NeList{DataContent} .  var IA : BuiltinInputAdaptor .

--- A transition relation of each component, defined by either equations or rules.
  op executeStep : Object ~> Object [format (m! o)] .

--- input adaptors (name, input, output length)
  op adaptor : BuiltinInputAdaptor NeList{DataContent} NzNat -> NeList{DataContent} [format (m! o)] .

--- apply adaptors to the input ports of given components
  op applyAdaptors : Configuration -> Configuration [format (m! o)] .
  eq applyAdaptors(< CR : PeriodicComponent | rate : NZ, features : PORTS > REST)
   = < CR : PeriodicComponent | features : applyAdaptors(NZ,PORTS,none) > applyAdaptors(REST) .
  eq applyAdaptors(none) = none .

  op applyAdaptors : NzNat Configuration Configuration -> Object [format (m! o)] .
  eq applyAdaptors(NZ, < P : InPort | content : NDL, 
                                      properties : (MRSynchAADL::InputAdaptor => {IA}); PROPS > PORTS, PORTS')
   = applyAdaptors(NZ, PORTS, PORTS' < P : InPort | content : adaptor(IA, NDL, NZ) >)  .
  eq applyAdaptors(NZ, PORTS, PORTS') = PORTS PORTS' [owise] .
endtom)


(tomod THREAD-DYNAMICS is
  including COMPONENT-DYNAMICS .
  including THREAD-COMPONENT .
  including BEHAVIOR-TRANSITION-SEMANTICS .

  vars COMPS COMPS' PORTS PORTS' : Configuration .  var PROPS : PropertyAssociation .  
  vars VAL VAL' : VarValuation .  vars FMAP FMAP' : FeatureMap .  
  var CR : ComponentRef .  var VIS : Set{VarId} .
  vars L L' : Location . vars LS : Set{Location} . 
  var GUARD : TransGuard .  var TRS TRS' : Set{Transition} .  var ACTION : ActionBlock .

--- aux operators
  op executeStepRead : Pair{Configuration,FeatureMap} Object ~> Object [format (m! o)] . 
  op executeStepTrans : Configuration Tuple{Location,FeatureMap,Configuration} Object ~> Object [format (m! o)] . 

--- first, read data in its input ports
  eq executeStep(< CR : Thread | features : PORTS >)
   = executeStepRead(readFeature(PORTS), < CR : Thread | features : PORTS >) .

--- then, execute its transition system; for nondeterministic cases, execTransSystem will be rewritten by rules.
  eq executeStepRead(PORTS' | FMAP, 
         < CR : Thread | subcomponents : COMPS, properties : PROPS, 
			 currState : L, completeStates : LS,  
			 variables : VIS,   transitions : TRS >)
   = 
     if MRSynchAADL::Nondeterministic => {true} in PROPS
     then executeStepTrans(PORTS',    execTransSystem(L,LS,TRS,defaultValuation(VIS), FMAP | COMPS | PROPS), < CR : Thread | >) 
     else executeStepTrans(PORTS', execDetTransSystem(L,LS,TRS,defaultValuation(VIS), FMAP | COMPS | PROPS), < CR : Thread | >) fi .

--- its ports, data, and state will be update accordingly
  eq executeStepTrans(PORTS', L' | FMAP' | COMPS', < CR : Thread | >)
   = < CR : Thread | features : writeFeature(FMAP',PORTS'), subcomponents : COMPS', currState : L' > .
endtom)


(tomod ENSEMBLE-DYNAMICS is
  including COMPONENT-DYNAMICS .
  including ENSEMBLE-COMPONENTS .
  including DEFAULT-PROPERTIES .
  protecting TRANSFER-DATA .

  vars CR : ComponentRef .  var P : FeatureId .  var N : Nat . var NZ : NzNat . 
  vars OBJ : Object .  vars COMPS : Configuration . var PROPS : PropertyAssociation .
  var PROPS : PropertyAssociation .  var NDL : NeList{DataContent} . 
  var QUEUE : [ObjectQueue] .  

--- the frozen attribute gives a deterministic order in rewriting.
  sort ObjectQueue .
  op nil : -> ObjectQueue [ctor] .
  op _::_ : Object ObjectQueue -> ObjectQueue [ctor frozen(2)] .
  op _|_ : ObjectQueue Configuration ~> Configuration [ctor] .

--- the result of prepareExecSub will be rewritten to an object .
  eq executeStep(< CR : Ensemble | >)
   = transferResults(prepareExecSub(applyAdaptorsSub(transferInputs(< CR : Ensemble | >)))) .

--- apply adaptors to subcomponents
   op applyAdaptorsSub : Object -> Object [format (m! o)] .
   eq applyAdaptorsSub(< CR : Ensemble | subcomponents : COMPS >)
    = < CR : Ensemble | subcomponents : applyAdaptors(COMPS) > .

--- prepare to execute. If there are several nondeterministic components,
--- we need to adopt the POR technique in the MR-PALS semantics.
  op prepareExecSub : Object ~> Object [format (m! o)] .
  eq prepareExecSub(< CR : Ensemble | subcomponents : COMPS >)
   = < CR : Ensemble | subcomponents : prepareExec(COMPS, nil) > .

  --- generate a "serialized" queue. This is generally needed since a system 
  --- component can contain several system components in AADL.
  op prepareExec : Configuration ObjectQueue ~> Configuration [format (m! o)] .
  eq prepareExec(< CR : PeriodicComponent | rate : NZ > COMPS, QUEUE)
   = prepareExec(COMPS, k-executeStep(NZ, < CR : PeriodicComponent | >) :: QUEUE) .
  eq prepareExec(COMPS, QUEUE) = QUEUE | COMPS [owise] .

  --- performs "executeStep" k times, after applying adaptors.
  op k-executeStep : Nat Object ~> Object [format (m! o)] .
  eq k-executeStep(s(N), OBJ) = executeStep(k-executeStep(N, OBJ)) .
  eq k-executeStep(0, OBJ)    = OBJ .

--- if the first item finishes its execution, then the next item is scheduled
  eq OBJ :: QUEUE | COMPS = QUEUE | COMPS OBJ .
  eq          nil | COMPS =         COMPS .
endtom)

