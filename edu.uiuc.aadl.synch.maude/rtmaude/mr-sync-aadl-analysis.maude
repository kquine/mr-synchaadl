
--- Define standard atomic propositions to make LTL model checking 
--- possible without knowing the Real-Time Maude representation of an AADL model.

(tomod AADL-LTL-PROPOSITION is
  including MODEL-TRANSITION-SYSTEM .
  including TIMED-MODEL-CHECKER .

  var C : ComponentId .   var P : FeatureId . 
  vars COMPS PORTS PORTS' REST : Configuration .
  var FMAP : FeatureMap .  var PROPS : PropertyAssociation .  
  var PATH : ComponentRef .  var L : Location . 
  var E : Expression .  var V : Value . var DCL : List{DataContent} .

--- component data expressions
  op _|_ : ComponentRef Expression -> Prop [ctor] .   

  eq {< C : Ensemble | subcomponents : COMPS >} |= PATH | E
   = lookupExp(COMPS, PATH, E) .

  op lookupExp : Configuration ComponentRef Expression -> Bool .
  eq lookupExp(< C : Ensemble | subcomponents : COMPS > REST, C . PATH, E)
   = lookupExp(COMPS, PATH, E) .
  eq lookupExp(< C : Component | features : PORTS, 
                                 subcomponents : COMPS, properties : PROPS > REST, C, E)
   = eval(E, empty | feedbackOutputs(PORTS,empty) | COMPS | PROPS) == [true] .
  eq lookupExp(REST, PATH, E) = false [owise] .

  --- return the last value in a given feedback output port
  --- TODO: need to have some function??
  op feedbackOutputs : Configuration FeatureMap -> FeatureMap [format (m! o)] .
  eq feedbackOutputs(< P : OutPort | content : DCL V > PORTS, FMAP)
   = feedbackOutputs(PORTS, insert(P, V, FMAP)) .
  eq feedbackOutputs(PORTS, FMAP) = FMAP [owise] .


--- thread states
  op _@_ : ComponentRef Location -> Prop [ctor] . 
  eq {< C : Ensemble | subcomponents : COMPS >} |= PATH @ L   
   = lookupState(COMPS, PATH, L) .

  op lookupState : Configuration ComponentRef Location -> Bool .
  eq lookupState(< C : Ensemble | subcomponents : COMPS > REST, C . PATH, L)
   = lookupState(COMPS, PATH, L) .
  eq lookupState(< C : Thread | currState : L > REST, C, L) = true .
  eq lookupState(REST, PATH, L) = false [owise] .
endtom)


(tomod AADL-SIMPLE-COUNTEREXAMPLE is 
  including AADL-LTL-PROPOSITION .
  including MAP{ComponentId,DataContent} * (op _|->_ to _<-_) .

  vars OBJ : Object .  vars REST PORTS COMPS : Configuration .  var CIS : CounterExampleItemSet .
  var C : ComponentId . var CR : ComponentRef . var P : FeatureId . var L : Location . 
  var DC : DataContent . var NDL : NeList{DataContent} .  var T : Time . var RN : RuleName .
  
--- simplified counter example information
  sorts CounterExampleItem .
  op _->`[_`] : ComponentRef CounterExampleItemSet -> CounterExampleItem [ctor format(r o d n++i d --)] .
  op variables:_ : Map{ComponentId,DataContent} -> CounterExampleItem [ctor prec 124 format(b o d)] .
  op outputs:_ : FeatureMap -> CounterExampleItem [ctor prec 124 format(b o d)] .
  op currState:_ : Location -> CounterExampleItem [ctor format(b o d)] .

  sort CounterExampleItemSet .
  subsort CounterExampleItem < CounterExampleItemSet .
  op none : -> CounterExampleItemSet [ctor] .
  op __ : CounterExampleItemSet CounterExampleItemSet -> CounterExampleItemSet [ctor comm assoc id: none format(d ni d) prec 126] .

  sort TimedCounterExampleItemSet .
  op _in`time_ : CounterExampleItemSet Time -> TimedCounterExampleItemSet [ctor format (o nig g y o) prec 127] .

  --- new counterexample transition
  op `{_`,_`} : CounterExampleItemSet RuleName -> Transition [ctor format(n d d d d d)] .
  op `{_`,_`} : TimedCounterExampleItemSet RuleName -> Transition [ctor format(n d d d d d)] .

  --- removes redundant information
  eq CR ->[(variables: empty) CIS] = CR ->[CIS] .
  eq CR ->[(outputs: empty) CIS]   = CR ->[CIS] .
  eq C ->[ CR -> [CIS] ] = C . CR -> [CIS] .

  --- simplify rules
  eq {{< C : Ensemble | subcomponents : COMPS >}, RN} 
   = {simplify(COMPS), RN} .  --- simplify transition

  eq {global({< C : Ensemble | subcomponents : COMPS >} in time T), RN} 
   = {simplify(COMPS) in time T, RN} .  --- simplify transition

  --- need to deal with "transformed" models in Real-Time Maude
  op global : ClockedSystem -> ClockedSystem .

--- simplify
  op simplify : Configuration -> CounterExampleItemSet .
  eq simplify(< C : Ensemble | > REST) = (C ->[ simplifyEnsemble(< C : Ensemble | >) ]) simplify(REST) .
  eq simplify(< C : Thread | > REST) = (C ->[ simplifyThread(< C : Thread | >) ]) simplify(REST) .
  eq simplify(REST) = none [owise] .

--- simplify ensemble
  op simplifyEnsemble : Object -> CounterExampleItemSet .
  eq simplifyEnsemble(< C : Ensemble | subcomponents : COMPS, features : PORTS >) 
   = (outputs: simplifyFeatures(PORTS)) simplify(COMPS) .

--- simplify thread
  op simplifyThread : Object -> CounterExampleItem .
  eq simplifyThread(< C : Thread | subcomponents : COMPS, features : PORTS, currState : L >)
   = (variables: simplifyData(COMPS)) (outputs: simplifyFeatures(PORTS)) (currState: L) .
  eq simplifyThread(OBJ) = none [owise] .

--- simplify data components
  op simplifyData : Configuration -> Map{ComponentId,DataContent} .
  eq simplifyData(< C : Data | value : DC > REST) = (C <- DC), simplifyData(REST) .
  eq simplifyData(REST) = empty [owise] .

--- simplify features, showing only output (feedback) port values
  op simplifyFeatures : Configuration -> FeatureMap .
  eq simplifyFeatures(< P : OutPort | content : NDL > REST) = (P |-> {NDL}), simplifyFeatures(REST) .
  eq simplifyFeatures(REST) = empty [owise] .

  op `{_`} : List{DataContent} -> DataContent [ctor] .
endtom)



